
Boilerplate code
<-- c -->
Copy

static inline void printMatrixC(const int* mat, int rows, int cols) {
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++)
            printf("%d ", mat[i * cols + j]);
        printf("\n");
    }
}

Copy

static inline int* multiplyMatricesC(const int* A, int rA, int cA, const int* B, int rB, int cB) {
    if (cA != rB) return NULL;
    int* C = (int*) malloc(rA * cB * sizeof(int));
    if (!C) return NULL;
    for (int i = 0; i < rA; i++) {
        for (int j = 0; j < cB; j++) {
            int sum = 0;
            for (int k = 0; k < cA; k++)
                sum += A[i * cA + k] * B[k * cB + j];
            C[i * cB + j] = sum;
        }
    }
    return C;
}

Copy

static inline int* addMatricesC(const int* A, const int* B, int rows, int cols) {
    int* C = (int*) malloc(rows * cols * sizeof(int));
    if (!C) return NULL;
    for (int i = 0; i < rows; i++)
        for (int j = 0; j < cols; j++)
            C[i * cols + j] = A[i * cols + j] + B[i * cols + j];
    return C;
}

Copy

static inline int* transposeMatrixC(const int* A, int rows, int cols) {
    int* T = (int*) malloc(rows * cols * sizeof(int));
    if (!T) return NULL;
    for (int i = 0; i < rows; i++)
        for (int j = 0; j < cols; j++)
            T[j * rows + i] = A[i * cols + j];
    return T;
}

C functions with modulus ---
Copy

static inline int* multiplyMatricesModC(const int* A, int rA, int cA, const int* B, int rB, int cB, int mod) {
    if (cA != rB) return NULL;
    int* C = (int*) malloc(rA * cB * sizeof(int));
    if (!C) return NULL;
    for (int i = 0; i < rA; i++) {
        for (int j = 0; j < cB; j++) {
            long sum = 0;
            for (int k = 0; k < cA; k++)
                sum = (sum + ((long)A[i * cA + k] * B[k * cB + j]) % mod) % mod;
            C[i * cB + j] = (int)(sum % mod);
        }
    }
    return C;
}

Copy

static inline int* addMatricesModC(const int* A, const int* B, int rows, int cols, int mod) {
    int* C = (int*) malloc(rows * cols * sizeof(int));
    if (!C) return NULL;
    for (int i = 0; i < rows; i++)
        for (int j = 0; j < cols; j++)
            C[i * cols + j] = (A[i * cols + j] + B[i * cols + j]) % mod;
    return C;
}

<-- CPP -->
Copy

inline void printMatrix(const vector<vector<int>>& mat) {
    for (const auto &row : mat) {
        for (const auto &val : row)
            cout << val << " ";
        cout << "\n";
    }
}

Copy

inline vector<vector<int>> multiplyMatrices(const vector<vector<int>> &A, const vector<vector<int>> &B) {
    int rA = A.size(), cA = A[0].size();
    int rB = B.size(), cB = B[0].size();
    if (cA != rB) return {};
    vector<vector<int>> result(rA, vector<int>(cB, 0));
    for (int i = 0; i < rA; i++)
        for (int j = 0; j < cB; j++)
            for (int k = 0; k < cA; k++)
                result[i][j] += A[i][k] * B[k][j];
    return result;
}

Copy

inline vector<vector<int>> multiplyMatrices(const vector<vector<int>> &A, const vector<vector<int>> &B, int mod) {
    int rA = A.size(), cA = A[0].size();
    int rB = B.size(), cB = B[0].size();
    if (cA != rB) return {};
    vector<vector<int>> result(rA, vector<int>(cB, 0));
    for (int i = 0; i < rA; i++) {
        for (int j = 0; j < cB; j++) {
            long long sum = 0;
            for (int k = 0; k < cA; k++) {
                sum = (sum + ((long long)A[i][k] * B[k][j]) % mod) % mod;
            }
            result[i][j] = (int)(sum % mod);
        }
    }
    return result;
}

Copy

inline vector<vector<int>> addMatrices(const vector<vector<int>> &A, const vector<vector<int>> &B) {
    int rows = A.size(), cols = A[0].size();
    vector<vector<int>> result(rows, vector<int>(cols, 0));
    for (int i = 0; i < rows; i++)
        for (int j = 0; j < cols; j++)
            result[i][j] = A[i][j] + B[i][j];
    return result;
}

Copy

inline vector<vector<int>> addMatrices(const vector<vector<int>> &A, const vector<vector<int>> &B, int mod) {
    int rows = A.size(), cols = A[0].size();
    vector<vector<int>> result(rows, vector<int>(cols, 0));
    for (int i = 0; i < rows; i++)
        for (int j = 0; j < cols; j++)
            result[i][j] = (A[i][j] + B[i][j]) % mod;
    return result;
}

Copy

inline vector<vector<int>> transposeMatrix(const vector<vector<int>> &A) {
    int rows = A.size(), cols = A[0].size();
    vector<vector<int>> result(cols, vector<int>(rows, 0));
    for (int i = 0; i < rows; i++)
        for (int j = 0; j < cols; j++)
            result[j][i] = A[i][j];
    return result;
}

